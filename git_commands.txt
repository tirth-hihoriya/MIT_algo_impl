`git init`         // to initialize   which will led you to working directory

Git Workflow
Nice! We have a Git project. A Git project can be thought of as having three parts:

1)A Working Directory: where you’ll be doing all the work: creating, editing, deleting and organizing files
2)A Staging Area: where you’ll list changes you make to the working directory
3)A Repository: where Git permanently stores those changes as different versions of the project
    The Git workflow consists of editing files in the working directory, adding files to the staging area,
     and saving changes to a Git repository. In Git, we save changes with a commit, which we will learn more about in this lesson.


As you write the screenplay, you will be changing the contents of the working directory. You can check the status of those changes with:

`git status`





git add
In order for Git to start tracking scene-1.txt, the file needs to be added to the staging area.

We can add a file to the staging area with:

`git add filename.c`
The word filename here refers to the name of the file you are editing, such as scene-1.txt.




git diff
Good work! Now you know how to add a file to the staging area.

Imagine that we type another line in scene-1.txt. Since the file is tracked, we can check the differences between the working directory and the staging area with:

git diff filename
Here, filename is the actual name of the file. If the name of my file was changes.txt the command would be

`git diff changes.txt`




git commit
A commit is the last step in our Git workflow. A commit permanently stores changes from the staging area inside the repository.

git commit is the command we’ll do next. However, one more bit of code is needed for a commit: the option -m followed by a message. Here’s an example:

`  git commit -m "Complete first line of dialogue"  `


Standard Conventions for Commit Messages:

Must be in quotation marks
Written in the present tense
Should be brief (50 characters or less) when using -m


git log
Often with Git, you’ll need to refer back to an earlier version of a project. Commits are stored chronologically in the repository and can be viewed with:

`git log`





Generalizations
You have now been introduced to the fundamental Git workflow. You learned a lot! Let’s take a moment to generalize:

Git is the industry-standard version control system for web developers
Use Git commands to help keep track of changes made to a project:

git init             creates a new Git repository
git status           inspects the contents of the working directory and staging area
git add adds         files from the working directory to the staging area
git diff             shows the difference between the working directory and the staging area
git commit           permanently stores file changes from the staging area in the repository
git log              shows a list of all previous commits






head commit
In Git, the commit you are currently on is known as the HEAD commit. In many cases, the most recently made commit is the HEAD commit.

To see the HEAD commit, enter:

`git show HEAD`
The output of this command will display everything the git log command displays for the HEAD commit, plus all the file changes that were committed.





more git add
The hamlet repository we are working on contains five files. In Git, it’s common to change many files, add those files to the staging area, and commit them to a repository in a single commit.

For example, say you want to change the character “LARRY” to “LAERTES” in the script. The name currently appears in two files. After you change the name in both files, you could add the changed files to the staging area with:

git add filename_1 filename_2
Note the word filename above refers to the name of the file you are adding to the staging area, such as scene-3.txt.



git reset I
Great! The files you’ve added to the staging area belong in the same commit.

What if, before you commit, you accidentally delete an important line from scene-2.txt? Unthinkingly, you add scene-2.txt to the staging area. The file change is unrelated to the Larry/Laertes swap and you don’t want to include it in the commit.

We can unstage that file from the staging area using

`git reset HEAD filename.c`
This command resets the file in the staging area to be the same as the HEAD commit. It does not discard file changes from the working directory, it just removes them from the staging area.





git reset II
Creating a project is like hiking in a forest. Sometimes you take a wrong turn and find yourself lost.

Just like retracing your steps on that hike, Git enables you to rewind to the part before you made the wrong turn. You can do this with:

git reset commit_SHA
This command works by using the first 7 characters of the SHA of a previous commit. For example, if the SHA of the previous commit is 5d692065cf51a2f50ea8e7b19b5a7ae512f633ba, use:

`git reset 5d69206`
HEAD is now set to that previous commit.







Generalizations
Congratulations! You’ve learned three different ways to backtrack in Git. You can use these skills to undo changes
 made to your Git project.

Let’s take a moment to review the new commands:

git checkout HEAD filename: Discards changes in the working directory.
git reset HEAD filename: Unstages file changes in the staging area.
git reset commit_SHA: Resets to a previous commit in your commit history.
Additionally, you learned a way to add multiple files to the staging area with a single command:

git add filename_1 filename_2








git branch
Up to this point, you’ve worked in a single Git branch called master. Git allows us to create branches to experiment
 with versions of a project. Imagine you want to create version of a story with a happy ending. You can create a new 
 branch and make the happy ending changes to that branch only. It will have no effect on the master branch until you’re
  ready to merge the happy ending to the master branch.

In this lesson, we’ll be using Git branching to develop multiple versions of a resumé.

You can use the command below to answer the question: “which branch am I on?”

`git branch`     e.g.  output :  master








git branch 2
Right now, the Git project has only one branch: master.

To create a new branch, use:

`git branch new_branch`

Here new_branch would be the name of the new branch you create, like photos or blurb. Be sure to name
 your branch something that describes the purpose of the branch. Also, branch names can’t contain whitespaces:
  new-branch and new_branch are valid branch names, but new branch is not.




git checkout
Great! You just created a new branch.

The master and fencing branches are identical: they share the same exact commit history. You can switch to the new branch with

`git checkout branch_name`
Here, branch_name is the name of the branch. If the branch’s name is skill

git checkout skill
Once you switch branch, be now able to make commits on the branch that have no impact on master.

You can continue your workflow, while master stays intact!






Commit on a new branch
Congratulations! You have switched to a new branch. All the commands you do on master, you can also do on this branch.

For example, to add files to the staging area, use:

`git add filename`
And to commit, use:

`git commit -m "Commit message"``
In a moment, you will make a commit on the fencing branch. 
On the far right, the diagram shows what will happen to the Git project.





git merge
What if you wanted include all the changes made to the fencing branch on the master branch?
 We can easily accomplish this by merging the branch into master with:

`git merge branch_name`
For example, if I wanted to merge the skills branch to master, I would enter

but befor merging it to `master` you have to go to `master` branch using `git checkout master`     **********IMP******

git merge skills
In a moment, you’ll merge branches. Keep in mind:

Your goal is to update master with changes you made to fencing.
fencing is the giver branch, since it provides the changes.
master is the receiver branch, since it accepts those changes.




merge conflict I
The merge was successful because master had not changed since we made a commit on fencing. Git knew to simply 
update master with changes on fencing.

What would happen if you made a commit on master before you merged the two branches? Furthermore, what if the 
commit you made on master altered the same exact text you worked on in fencing? When you switch back to master 
and ask Git to merge the two branches, Git doesn’t know which changes you want to keep. This is called a merge conflict.




merge conflict II
Let’s say you decide you’d like to merge the changes from fencing into master.

Here’s where the trouble begins!

You’ve made commits on separate branches that alter the same line in conflicting ways.
 Now, when you try to merge fencing into master, Git will not know which version of the file to keep.





delete branch
In Git, branches are usually a means to an end. You create them to work on a new project feature, 
but the end goal is to merge that feature into the master branch. After the branch has been integrated into master,
 it has served its purpose and can be deleted.

The command

`git branch -d branch_name`
will delete the specified branch from your Git project.

Now that master contains all the file changes that were in fencing, let’s delete fencing.




generalizations
Let’s take a moment to review the main concepts and commands from the lesson before moving on.

Git branching allows users to experiment with different versions of a project by checking out separate branches
 to work on.
The following commands are useful in the Git branch workflow.

git branch: Lists all a Git project’s branches.
git branch branch_name: Creates a new branch.
git checkout branch_name: Used to switch from one branch to another.
git merge branch_name: Used to join file changes from one branch to another.
git branch -d branch_name: Deletes the branch specified.





git clone
Sally has created the remote repository, science-quizzes in the directory curriculum, which teachers on the school’s shared network have access to. In order to get your own replica of science-quizzes, you’ll need to clone it with:

git clone remote_location clone_name

In this command: 
remote_location tells Git where to go to find the remote. This could be a web address, or a filepath, such as:
/Users/teachers/Documents/some-remote
clone_name is the name you give to the directory in which Git will clone the repository.





git clone
Sally has created the remote repository, science-quizzes in the directory curriculum, which teachers on the school’s shared network have access to. In order to get your own replica of science-quizzes, you’ll need to clone it with:

git clone remote_location clone_name

In this command: 
remote_location tells Git where to go to find the remote. This could be a web address, or a filepath, such as:
/Users/teachers/Documents/some-remote
clone_name is the name you give to the directory in which Git will clone the repository.




git merge
Even though Sally’s new commits have been fetched to your local copy of the Git project, those commits are on the origin/master branch. Your local master branch has not been updated yet, so you can’t view or make changes to any of the work she has added.

In Lesson III, Git Branching we learned how to merge branches. Now we’ll use the git merge command to integrate origin/master into your local master branch. The command:

git merge origin/master
will accomplish this for us.





git push
Now it’s time to share our work with Sally.

The command:

git push origin your_branch_name
will push your branch up to the remote, origin. From there, Sally can review your branch
 and merge your work into the master branch, making it part of the definitive project version.



generalizations
Congratulations, you now know enough to start collaborating on Git projects! Let’s review.

A remote is a Git repository that lives outside your Git project folder. Remotes can live on the web, on a shared network or even in a separate folder on your local computer.
The Git Collaborative Workflow are steps that enable smooth project development when multiple collaborators are working on the same Git project.
We also learned the following commands

git clone: Creates a local copy of a remote.
git remote -v: Lists a Git project’s remotes.
git fetch: Fetches work from the remote into the local copy.
git merge origin/master: Merges origin/master into your local branch.
git push origin <branch_name>: Pushes a local branch to the origin remote.
Git projects are usually managed on Github, a website that hosts Git projects for millions of users. With Github you can access your projects from anywhere in the world by using the basic workflow you learned here.
